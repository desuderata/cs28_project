# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python
image: python:latest

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
services:
  # - mysql:latest
  - postgres:12.2-alpine

variables:
  POSTGRES_DB: ci
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: "postgres"
  POSTGRES_HOST_AUTH_METHOD: trust

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  paths:
    - ~/.cache/pip/

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres
before_script:
  - python -V  # Print out python version for debugging
  # Uncomment next line if your Django app needs a JS runtime:
  # - apt-get update -q && apt-get install nodejs -yqq
  - pip install -r requirements.txt
  - cd cs28_project
  - python manage.py makemigrations
  - python manage.py migrate

# To get Django tests to work you may need to create a settings file using
# the following DATABASES:
#
# DATABASES = {
#     'default': {
#        'ENGINE': 'django.db.backends.postgresql_psycopg2',
#        'NAME': 'ci',
#        'USER': 'postgres',
#        'PASSWORD': 'postgres',
#        'HOST': 'postgres',
#        'PORT': '5432',
#    },
# }
#
# and then adding `--settings app.settings.ci` (or similar) to the test command

stages:
  - Static Analysis
  - Test
  - Deploy
  
flake8:
  tags:
    - runner
    - docker
  stage: Static Analysis
  before_script:
    - pip install flake8
    - pip install flake8-codeclimate
  script:
    - python -m flake8 --exit-zero --exclude="**\migrations\*"
    - python -m flake8 --exit-zero --exclude="**\migrations\*" --format=codeclimate > codeclimate.json
  artifacts:
    reports:
      codequality: codeclimate.json
    when: always

test_login:
  tags:
    - docker
  services:
    - postgres:latest
  stage: Test
  variables:
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/$POSTGRES_DB"
  script:
    - python manage.py test

deploy:
  tags:
    - docker
  stage: Deploy
  script:
    - cd ..
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
    - dpl --provider=heroku --app=cs28 --api-key=$HEROKU_API_KEY
